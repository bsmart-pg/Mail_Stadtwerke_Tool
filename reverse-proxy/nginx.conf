# ===========================================
# NGINX reverse proxy for Supabase + Backend
# - Internal HTTP (port 80, default_server) for containers
# - Public HTTP -> HTTPS redirect for your real domain
# - Public HTTPS serving SPA and proxying /api, /rest/v1, /auth/v1
# ===========================================

worker_processes auto;

events {
  worker_connections 1024;
}

http {
  # ---- Sensible defaults ----
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 4096;
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # ---- Gzip (optional) ----
  gzip on;
  gzip_types text/plain text/css application/javascript application/json image/svg+xml;

  # ---- Upstreams (Docker service names resolve via Docker DNS) ----
  upstream backend_upstream  { server openai-backend:3001; }
  upstream rest_upstream     { server supabase-rest:3000; }
  upstream auth_upstream     { server supabase-auth:9999; }
  # If you prefer proxying a frontend container instead of serving static files,
  # define: upstream frontend_upstream { server vite-frontend:80; }

  # ============================================================
  # INTERNAL HTTP entrypoint for other containers (no TLS, no redirect)
  # ============================================================
  server {
    listen 80 default_server;
    server_name _;

    # Backend API (internal)
    location /api/ {
      proxy_pass http://backend_upstream/;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Supabase REST (versioned path used by supabase-js)
    # Example: http://proxy/rest/v1/incoming_emails
    location /rest/v1/ {
      proxy_pass http://rest_upstream/;   # rewrites /rest/v1/... -> /...
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Supabase Auth (versioned path used by supabase-js)
    # Example: http://proxy/auth/v1/token
    location /auth/v1/ {
      proxy_pass http://auth_upstream/;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Optional: keep a minimal response for /
    location = / {
      return 204;
    }
  }

  # ============================================================
  # PUBLIC HTTP -> HTTPS redirect for your real domain
  # ============================================================
  server {
    listen 80;
    listen [::]:80;
    server_name bsmartdb.swsteinburg.de;
    return 301 https://$host$request_uri;
  }

  # ============================================================
  # PUBLIC HTTPS vhost (serves SPA + proxies)
  # ============================================================
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name bsmartdb.swsteinburg.de;

    # ---- TLS (use full chain if available) ----
    ssl_certificate     /etc/ssl/app/cert.pem;      # better: fullchain.pem
    ssl_certificate_key /etc/ssl/app/key.key;
    ssl_protocols TLSv1.2 TLSv1.3;

    # ---- Serve SPA (built files should be in /usr/share/nginx/html) ----
    root /usr/share/nginx/html;
    index index.html;

    # Cache static assets a bit
    location ~* \.(?:css|js|mjs|png|jpg|jpeg|gif|webp|ico|svg|ttf|woff|woff2)$ {
      try_files $uri =404;
      access_log off;
      expires 7d;
    }

    # SPA fallback for client-side routing
    location / {
      try_files $uri /index.html;
    }

    # ----- Backend API (public) -----
    location /api/ {
      proxy_pass http://backend_upstream/;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # ----- Supabase REST (public, versioned path) -----
    location /rest/v1/ {
      proxy_pass http://rest_upstream/;   # strips /rest/v1/ -> /
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;

      # CORS for browser clients hitting your public domain
      add_header Access-Control-Allow-Origin https://bsmartdb.swsteinburg.de always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers "*" always;
      add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # (Optional) keep /rest/ (without /v1) if you have tools hitting it
    location /rest/ {
      proxy_pass http://rest_upstream/;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;

      add_header Access-Control-Allow-Origin https://bsmartdb.swsteinburg.de always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers "*" always;
      add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # ----- Supabase Auth (public, versioned path) -----
    location /auth/v1/ {
      proxy_pass http://auth_upstream/;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Optional: HSTS once everything is confirmed to work over HTTPS
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  }
} 

